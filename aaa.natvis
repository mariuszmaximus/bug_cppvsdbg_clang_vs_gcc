<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">


  <Type Name="std::__1::vector&lt;*&gt;">
    <DisplayString>{{ size={__end_ - __begin_} }}</DisplayString>
    <Expand>
      <Item Name="[size]" ExcludeView="simple">__end_ - __begin_</Item>
      <Item Name="[capacity]" ExcludeView="simple">__end_cap_.__value_ - __begin_</Item>
      <ArrayItems>
        <Size>__end_ - __begin_</Size>
        <ValuePointer>__begin_</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

 
  <Type Name="std::__1::aabasic_string&lt;*&gt;">
    <DisplayString>{{ size={__end_ - __begin_} }}</DisplayString>
    <Expand>
      <Item Name="[size]" ExcludeView="simple">__end_ - __begin_</Item>
      <Item Name="[capacity]" ExcludeView="simple">__end_cap_.__value_ - __begin_</Item>
      <ArrayItems>
        <Size>__end_ - __begin_</Size>
        <ValuePointer>__begin_</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>



  <Type Name="std::__1::basic_string&lt;char,*&gt;">
    <!--<Intrinsic Name="is_long"
            Expression="((__rep*)&amp;__r_)-&gt;__s.__size_ &amp; 0x80" />-->
    <!-- The above doesn't work because of https://llvm.org/PR41615
         TODO(thakis): Now that we have clang r362038, try the above approach
                       again.
         The below assumes the alternate string layout and little endianness :/
    -->
    <Intrinsic Name="is_long"
        Expression="*(((char*)this) + 3*sizeof(size_t) - 1) &amp; 0x80" />
    <DisplayString Condition="is_long()">{*(char**)this}</DisplayString>
    <DisplayString Condition="!is_long()">{(char*)this}</DisplayString>
    <StringView Condition="is_long()">*(char**)this</StringView>
    <StringView Condition="!is_long()">(char*)this</StringView>
    <Expand>
      <Item Name="[size]" Condition="is_long()"
          ExcludeView="simple">((size_t*)this)[1]</Item>
      <Item Name="[size]" Condition="!is_long()"
          ExcludeView="simple">*(((char*)this) + 3*sizeof(size_t) - 1)</Item>
      <Item Name="[capacity]" Condition="is_long()" ExcludeView="simple">
        ((size_t*)this)[2] &amp; (~((size_t)0) &gt;&gt; 1)
      </Item>
      <Item Name="[capacity]" Condition="!is_long()"
          ExcludeView="simple">22</Item>
      <ArrayItems>
        <Size Condition="is_long()">((size_t*)this)[1]</Size>
        <Size Condition="!is_long()">
          *(((char*)this) + 3*sizeof(size_t) - 1)
        </Size>
        <ValuePointer Condition="is_long()">*(char**)this</ValuePointer>
        <ValuePointer Condition="!is_long()">(char*)this</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

<!--
  

  <Type Name="std::__1::basic_string&lt;char,*&gt;">
    <Intrinsic Name="is_long"
        Expression="*(((char*)this) + 3*sizeof(size_t) - 1) &amp; 0x80" />
    <DisplayString Condition="is_long()">{*(char**)this}</DisplayString>
    <DisplayString Condition="!is_long()">{(char*)this}</DisplayString>
    <StringView Condition="is_long()">*(char**)this</StringView>
    <StringView Condition="!is_long()">(char*)this</StringView>
    <Expand>
      <Item Name="[size]" Condition="is_long()"
          ExcludeView="simple">((size_t*)this)[1]</Item>
      <Item Name="[size]" Condition="!is_long()"
          ExcludeView="simple">*(((char*)this) + 3*sizeof(size_t) - 1)</Item>
      <Item Name="[capacity]" Condition="is_long()" ExcludeView="simple">
        ((size_t*)this)[2] &amp; (~((size_t)0) &gt;&gt; 1)
      </Item>
      <Item Name="[capacity]" Condition="!is_long()"
          ExcludeView="simple">22</Item>
      <ArrayItems>
        <Size Condition="is_long()">((size_t*)this)[1]</Size>
        <Size Condition="!is_long()">
          *(((char*)this) + 3*sizeof(size_t) - 1)
        </Size>
        <ValuePointer Condition="is_long()">*(char**)this</ValuePointer>
        <ValuePointer Condition="!is_long()">(char*)this</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  -->


<!--
  https://developercommunity.visualstudio.com/t/No-debugger-NATVISPretty-Printing-when/10456256?space=8&q=hotrestart&sort=newest
    <Type Name="std::__1::stringXXX">
        <AlternativeType Name="std::__1::basic_string<char,*>" />
        <DisplayString>{(char*)(__r_.__value_.__l.__data_)}</DisplayString>
        <Expand>
          <Item Name="[string]">(char*)(__r_.__value_.__l.__data_)</Item>
          <Item Name="[size]">__r_.__value_.__l.__size_</Item>
        </Expand>
    </Type>




 <Type Name="std::__1::vector<*>">
    <DisplayString>{{size={__end_ - __begin_}}}</DisplayString>
    <Expand>
      <Item Name="[size]" ExcludeView="simple">__end_ - __begin_</Item>
      <Item Name="[capacity]" ExcludeView="simple">__end_cap_.__value_ - __begin_</Item>
      <Item Name="[allocator]" ExcludeView="simple">__end_cap_</Item>
      <ArrayItems>
        <Size>__end_ - __begin_</Size>
        <ValuePointer>__begin_</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  -->

</AutoVisualizer>
